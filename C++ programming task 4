TASK 4
TO-DO LIST
Build a simple console-based to-do list
manager that allows users to add, view, and
delete tasks
Task Input: Allow users to input tasks they want to add to the list.
Add Task: Implement a function to add tasks to the list.
View Tasks: Display the list of tasks with their status (completed or
pending).
Mark Task as Completed: Allow users to mark tasks as completed.
Remove Task: Provide an option to remove tasks from the list.

#include <iostream>
#include <vector>
#include <string>

using namespace std;

// Define a structure for a Task
struct Task {
    string description;
    bool completed;
};

// Function to add a task to the list
void addTask(vector<Task>& tasks) {
    string taskDescription;
    cout << "Enter the task description: ";
    cin.ignore();  // To ignore the previous newline character from the input buffer
    getline(cin, taskDescription);  // Allow input with spaces
    
    Task newTask = {taskDescription, false}; // New task with 'completed' as false
    tasks.push_back(newTask);
    cout << "Task added successfully.\n";
}

// Function to mark a task as completed
void markTaskCompleted(vector<Task>& tasks) {
    int taskId;
    cout << "Enter the task number to mark as completed: ";
    cin >> taskId;
    
    if (taskId > 0 && taskId <= tasks.size()) {
        tasks[taskId - 1].completed = true;
        cout << "Task marked as completed.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

// Function to remove a task from the list
void removeTask(vector<Task>& tasks) {
    int taskId;
    cout << "Enter the task number to remove: ";
    cin >> taskId;

    if (taskId > 0 && taskId <= tasks.size()) {
        tasks.erase(tasks.begin() + taskId - 1);
        cout << "Task removed successfully.\n";
    } else {
        cout << "Invalid task number.\n";
    }
}

// Function to view all tasks
void viewTasks(const vector<Task>& tasks) {
    if (tasks.empty()) {
        cout << "No tasks to display.\n";
        return;
    }

    cout << "Tasks List:\n";
    for (size_t i = 0; i < tasks.size(); ++i) {
        cout << (i + 1) << ". " << tasks[i].description 
             << " [Status: " << (tasks[i].completed ? "Completed" : "Pending") << "]\n";
    }
}

int main() {
    vector<Task> tasks;
    int choice;

    while (true) {
        cout << "\nTo-Do List Manager\n";
        cout << "1. Add Task\n";
        cout << "2. View Tasks\n";
        cout << "3. Mark Task as Completed\n";
        cout << "4. Remove Task\n";
        cout << "5. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                addTask(tasks);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                markTaskCompleted(tasks);
                break;
            case 4:
                removeTask(tasks);
                break;
            case 5:
                cout << "Exiting the To-Do List Manager.\n";
                return 0;
            default:
                cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}
