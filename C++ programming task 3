TASK 3
TIC-TAC-TOE GAME
Build a simple console-based Tic-Tac-Toe game that
allows two players to play against each other

Game Board: Create a 3x3 grid as the game board.
Players: Assign "X" and "O" to two players.
Display Board: Show the current state of the board.
Player Input: Prompt the current player to enter their move.
Update Board: Update the game board with the player 's move.
Check for Win: Check if the current player has won.
Check for Draw: Determine if the game is a draw.
Switch Players: Alternate turns between "X" and "O" players.
Display Result: Show the result of the game (win, draw, or ongoing).
Play Again: Ask if the players want to play another game.

#include <iostream>
using namespace std;

// Function to display the Tic-Tac-Toe board
void displayBoard(char board[3][3]) {
    cout << "-------------\n";
    for (int i = 0; i < 3; i++) {
        cout << "| ";
        for (int j = 0; j < 3; j++) {
            cout << board[i][j] << " | ";
        }
        cout << endl;
        cout << "-------------\n";
    }
}

// Function to check if a player has won
bool checkWin(char board[3][3], char player) {
    // Check rows, columns, and diagonals
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player)
            return true;  // Row check
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player)
            return true;  // Column check
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player)
        return true;  // Diagonal check
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player)
        return true;  // Anti-diagonal check
    return false;
}

// Function to check if the game is a draw
bool checkDraw(char board[3][3]) {
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            if (board[i][j] == ' ')  // If any cell is empty, it's not a draw
                return false;
        }
    }
    return true;  // All cells are filled
}

// Function to prompt the player to make a move
void makeMove(char board[3][3], char player) {
    int row, col;
    while (true) {
        cout << "Player " << player << ", enter your move (row and column from 1 to 3): ";
        cin >> row >> col;
        row--;  // Adjust for 0-based indexing
        col--;

        // Check if the move is valid (within bounds and cell is empty)
        if (row >= 0 && row < 3 && col >= 0 && col < 3 && board[row][col] == ' ') {
            board[row][col] = player;
            break;
        } else {
            cout << "Invalid move. Try again.\n";
        }
    }
}

// Main function to control the game flow
int main() {
    char board[3][3];
    char player = 'X';
    bool gameOver = false;

    do {
        // Initialize the game board
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                board[i][j] = ' ';
            }
        }

        // Play the game
        while (!gameOver) {
            displayBoard(board);
            makeMove(board, player);

            // Check for a win or draw
            if (checkWin(board, player)) {
                displayBoard(board);
                cout << "Player " << player << " wins!\n";
                gameOver = true;
            } else if (checkDraw(board)) {
                displayBoard(board);
                cout << "It's a draw!\n";
                gameOver = true;
            } else {
                // Switch players
                player = (player == 'X') ? 'O' : 'X';
            }
        }

        // Ask if the players want to play again
        char playAgain;
        cout << "Do you want to play again? (y/n): ";
        cin >> playAgain;
        if (playAgain == 'n' || playAgain == 'N') {
            break;
        } else {
            gameOver = false;  // Reset for the next game
        }

    } while (true);

    cout << "Thank you for playing Tic-Tac-Toe!" << endl;

    return 0;
}
